import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
import requests
from datetime import datetime

API_KEY = "fecd18c530815576fd093eb555fef275"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –ø–æ–≥–æ–¥—ã
def get_weather_emoji(description):
    description = description.lower()
    if "clear" in description:
        return "‚òÄÔ∏è –Ø—Å–Ω–æ"
    elif "cloud" in description:
        return "‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ"
    elif "rain" in description or "drizzle" in description:
        return "üåßÔ∏è –î–æ–∂–¥—å"
    elif "thunderstorm" in description:
        return "‚õàÔ∏è –ì—Ä–æ–∑–∞"
    elif "snow" in description:
        return "‚ùÑÔ∏è –°–Ω–µ–≥"
    elif "mist" in description or "fog" in description:
        return "üå´Ô∏è –¢—É–º–∞–Ω"
    else:
        return "üåà –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
def get_weather():
    city = city_entry.get()
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric"
        response = requests.get(url)
        weather_data = response.json()

        if weather_data.get('cod') != 200:
            raise Exception(f"–û—à–∏–±–∫–∞: {weather_data.get('message')}")

        city_name = weather_data['name']
        temp = weather_data['main']['temp']
        feels_like = weather_data['main']['feels_like']
        humidity = weather_data['main']['humidity']
        pressure = weather_data['main']['pressure']
        wind_speed = weather_data['wind']['speed']
        description = weather_data['weather'][0]['description']
        weather_emoji = get_weather_emoji(description)
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        weather_info = (
            f"–ì–æ—Ä–æ–¥: {city_name}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather_emoji}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {current_time}"
        )

        result_label.config(text=weather_info)

    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π
def get_weather_forecast():
    city = city_entry.get()
    try:
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API_KEY}&units=metric"
        response = requests.get(url)
        forecast_data = response.json()

        if forecast_data.get('cod') != '200':
            raise Exception(f"–û—à–∏–±–∫–∞: {forecast_data.get('message')}")

        forecast_list = forecast_data['list']
        result = ""
        for forecast in forecast_list[:5]:  # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –±–ª–∏–∂–∞–π—à–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤
            date = forecast['dt_txt']
            temp = forecast['main']['temp']
            feels_like = forecast['main']['feels_like']
            humidity = forecast['main']['humidity']
            pressure = forecast['main']['pressure']
            wind_speed = forecast['wind']['speed']
            description = forecast['weather'][0]['description']
            weather_emoji = get_weather_emoji(description)

            result += (
                f"–î–∞—Ç–∞: {date}\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather_emoji}\n\n"
            )

        forecast_label.config(text=result)

    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = tk.Tk()
app.title("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ü–æ–≥–æ–¥—ã")
app.geometry("500x600")
app.configure(bg="#f0f0f0")

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
title_label = tk.Label(app, text="–ü–æ–≥–æ–¥–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", font=("Arial", 18, "bold"), bg="#f0f0f0", fg="#333")
title_label.pack(pady=10)

tk.Label(app, text="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:", font=("Arial", 14), bg="#f0f0f0", fg="#555").pack(pady=10)

city_entry = tk.Entry(app, font=("Arial", 14), width=25)
city_entry.pack(pady=10)

# –†–∞–º–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
result_frame = tk.Frame(app, bg="#e0e0e0", bd=2, relief="solid")
result_frame.pack(pady=20, fill="both", expand=True)

result_label = tk.Label(result_frame, text="", font=("Arial", 12), bg="#e0e0e0", justify="left")
result_label.pack(padx=10, pady=10)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
tk.Button(app, text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É", command=get_weather, font=("Arial", 12), bg="#4CAF50", fg="white", width=20).pack(pady=10)

# –†–∞–º–∫–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
forecast_frame = tk.Frame(app, bg="#e0e0e0", bd=2, relief="solid")
forecast_frame.pack(pady=10, fill="both", expand=True)

forecast_label = tk.Label(forecast_frame, text="", font=("Arial", 12), bg="#e0e0e0", justify="left")
forecast_label.pack(padx=10, pady=10)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π
tk.Button(app, text="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π", command=get_weather_forecast, font=("Arial", 12), bg="#2196F3", fg="white", width=20).pack(pady=10)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.mainloop()

